// https://adventofcode.com/2018/day/15 Beverage Bandits
package main

import (
	"bufio"
	_ "embed"
	"fmt"
	"sort"
	"strings"
	"time"
)

//go:embed test1.txt
var test1 string

//go:embed test2.txt
var test2 string

//go:embed test3.txt
var test3 string

//go:embed test4.txt
var test4 string

//go:embed test5.txt
var test5 string

//go:embed test6.txt
var test6 string

//go:embed input.txt
var input string

type Square struct {
	Point
	wall bool
	unit *Unit
	// open space if wall == false && unit == nil
}

// Unit describes an Elf or a Goblin
type Unit struct {
	Point
	species                string // "E"lf or "G"oblin
	attackPower, hitPoints int    // starts with 3, 200
}

// TODO at what point does the output from this, and
// python3 15.y 3<input.txt
// diverge, and why?
// diverges between rounds 38 .. 39

// TODO store pointers to units in a map, not as pointers in Area squares
// eg units = map[Point]struct{species, attackPower, hitPoints}
// grid will become [][]string with "#" wall else not-a-wall
// this is making a change just to keep the fingers busy,
// to see if anything shakes out
type Area [][]Square

func (a Area) wall(p Point) bool {
	return a[p.y][p.x].wall
}

func (a Area) unit(p Point) *Unit {
	return a[p.y][p.x].unit
}

func (a Area) setUnit(p Point, unit *Unit) {
	a[p.y][p.x].unit = unit
}

// square in area is unoccupied if it is "." and has no units on it
func (a Area) unoccupied(p Point) bool {
	return !a.wall(p) && a.unit(p) == nil
}

type Point struct {
	y, x int
}

func (p Point) add(q Point) Point {
	return Point{y: p.y + q.y, x: p.x + q.x}
}

// used by findEnemiesInRange and findAdjacentSquares
// changing the order of these points has NO effect on result
var toutesDirections []Point = []Point{
	{y: -1, x: 0}, // n/u
	{y: 0, x: -1}, // w/l
	{y: 0, x: 1},  // e/r
	{y: 1, x: 0},  // s/d
}

// used by bfs
// changing the order of these points has DOES effect the result
// which is weird and a clue to why result is wrong
var toutesDirectionsBfs []Point = []Point{
	{y: -1, x: 0}, // n/u
	{y: 0, x: -1}, // w/l
	{y: 0, x: 1},  // e/r
	{y: 1, x: 0},  // s/d
}

func duration(invocation time.Time, name string) {
	fmt.Println(name, "duration", time.Since(invocation))
}

func report(expected, result int) {
	if expected != -1 {
		if result != expected {
			fmt.Println("ERROR: got", result, "expected", expected)
		} else {
			fmt.Println("RIGHT ANSWER:", result)
		}
	}
}

// load the area and units from embedded input
func loadInput(s string, elfAttackPower int) Area {
	var area Area
	scanner := bufio.NewScanner(strings.NewReader(s))
	var y int
	for scanner.Scan() {
		var row []Square
		for x, ch := range scanner.Text() {
			var pt Point = Point{y: y, x: x}
			if ch == '#' {
				row = append(row, Square{Point: pt, wall: true})
			} else if ch == '.' {
				row = append(row, Square{Point: pt})
			} else {
				var u Unit = Unit{Point: pt, species: string(ch), hitPoints: 200}
				if ch == 'E' {
					u.attackPower = elfAttackPower
				} else {
					u.attackPower = 3
				}
				row = append(row, Square{Point: pt, unit: &u})
			}
		}
		area = append(area, row)
		y += 1
	}
	if err := scanner.Err(); err != nil {
		fmt.Println(err)

	}
	return area
}

// utility function for sort.Slice()
func readingOrder(a, b Point) bool {
	if a.y != b.y {
		return a.y < b.y
	} else {
		return a.x < b.x
	}
}

// return a list of enemy units adjacent to this unit
// sorted into attack order (hit points, reading order)
func findEnemiesInRange(area Area, unit *Unit) []*Unit {
	var inrange []*Unit
	for _, dir := range toutesDirections {
		var q Point = unit.Point.add(dir)
		if enemy := area.unit(q); enemy != nil {
			if enemy.hitPoints <= 0 {
				panic("findEnemiesInRange: dead enemy")
			}
			if enemy.species != unit.species {
				inrange = append(inrange, enemy)
			}
		}
	}
	sort.Slice(inrange, func(a, b int) bool {
		if inrange[a].hitPoints != inrange[b].hitPoints {
			return inrange[a].hitPoints < inrange[b].hitPoints
		} else {
			return readingOrder(inrange[a].Point, inrange[b].Point)
		}
	})
	return inrange
}

func attack(area Area, unit *Unit, enemy *Unit) {
	// attack target with lowest hit points (in reading order)
	if enemy.hitPoints <= 0 {
		panic("attack: dead enemy")
	}
	enemy.hitPoints -= unit.attackPower
	if enemy.hitPoints <= 0 {
		fmt.Println(enemy.species, "killed")
		area.setUnit(enemy.Point, nil)
	}
}

// return (up to four) points surrounding this unit's point
func findAdjacentSquares(area Area, unit *Unit) []Point {
	var targets = []Point{}
	for _, dir := range toutesDirections {
		var q Point = unit.Point.add(dir)
		if area.unoccupied(q) {
			targets = append(targets, q)
		}
	}
	return targets
}

// return a list of all the enemies (targets) of this unit
// in reading order
func findAllEnemies(area Area, unit *Unit) []*Unit {
	var enemies []*Unit
	for y := 0; y < len(area); y++ {
		for x := 0; x < len(area[0]); x++ {
			if enemy := area.unit(Point{y: y, x: x}); enemy != nil {
				if enemy.hitPoints <= 0 {
					panic("findAllEnemies: dead enemy")
				}
				if enemy.species != unit.species {
					enemies = append(enemies, enemy)
				}
			}
		}
	}
	return enemies
}

func bfs(area Area, start, end Point) (int, Point) {
	type BfsPoint struct {
		Point
		steps  int
		parent *BfsPoint
	}

	var seen map[Point]struct{} = make(map[Point]struct{})
	seen[start] = struct{}{}
	var q []BfsPoint = []BfsPoint{{Point: start}}
	for len(q) > 0 {
		var p BfsPoint
		p, q = q[0], q[1:]
		for _, dir := range toutesDirectionsBfs {
			var np Point = p.Point.add(dir)
			if _, ok := seen[np]; !ok {
				seen[np] = struct{}{}
				if area.unoccupied(np) {
					var bfsp BfsPoint = BfsPoint{Point: np, parent: &p, steps: p.steps + 1}
					if np == end {
						var firstStep Point
						for par := &bfsp; par.parent != nil; par = par.parent {
							firstStep = par.Point
						}
						return p.steps + 1, firstStep
					}
					q = append(q, bfsp)
				}
			}
		}
		// sort.Slice(q, func(i, j int) bool {
		// 	// if q[i].steps != q[j].steps {
		// 	// 	return q[i].steps < q[j].steps
		// 	// }
		// 	return readingOrder(q[i].Point, q[j].Point)
		// })
	}
	return -1, Point{}
}

// select the nearest reachable target square from a list of target squares
// (which is are unoccupied squares adjacent to an enemy)
func selectTarget(area Area, unit *Unit, targets map[Point]struct{}) (bool, Point) {
	type Target struct {
		steps     int
		target    Point
		firstStep Point
	}
	var t []Target
	for end := range targets {
		if steps, firstStep := bfs(area, unit.Point, end); steps != -1 {
			if steps == 0 {
				fmt.Println("steps is zero") // plenty of these if don't have steps + 1 from bfs()...
			}
			if firstStep == unit.Point {
				fmt.Println("first step is same as start") // ...but none of these
			}
			t = append(t, Target{steps, end, firstStep})
		}
	}
	if len(t) == 0 {
		return false, Point{}
	}
	/*
		   https://www.reddit.com/r/adventofcode/comments/a6urok/2018_day_15_something_thats_not_very_clear_and/
		   https://www.reddit.com/r/adventofcode/comments/a6hldy/comment/ebvifry/
		   1. "To move, the unit first considers the squares that are in range
		       and determines which of those squares it could reach in the fewest steps"
		   2. "If multiple squares are in range and tied for being reachable in the fewest steps,
		       the square which is first in reading order is chosen. "
		   3. "If multiple steps would put the unit equally closer to its destination,
		       the unit chooses the step which is first in reading order."

			Moving: you don't just take the path that takes you the fastest to an enemy,
			broken by reading order.
			You first choose the square adjacent to an enemy that you want to go to
			(closest, break ties by reading order),
			and then choose the move that takes you the fastest to it
			(break ties by reading order, again)."
	*/
	// sort first by distance (number of steps),
	// then secondly by target square,
	// then thirdly by first step toward the target square.
	sort.Slice(t, func(a, b int) bool {
		if t[a].steps != t[b].steps {
			return t[a].steps < t[b].steps
		} else if t[a].target != t[b].target {
			return readingOrder(t[a].target, t[b].target)
		} else {
			// nb this is never reached for any test or input
			return readingOrder(t[a].firstStep, t[b].firstStep)
		}
	})
	return true, t[0].firstStep
}

func move(area Area, unit *Unit, newPoint Point) {
	if !area.unoccupied(newPoint) {
		panic("unit overlap")
	}
	// if !(unit.Point.y == nextPoint.y+1 || unit.Point.y == nextPoint.y-1 || unit.Point.x == nextPoint.x+1 || unit.Point.x == nextPoint.x-1) {
	// 	panic("move: a point too far")
	// }
	area.setUnit(unit.Point, nil)
	unit.Point = newPoint
	area.setUnit(unit.Point, unit)
}

func round(area Area) (gameOver bool) {
	// in each round, each unit that is still alive takes a turn,
	// resolving all of its actions before the next unit's turn begins.
	// On each unit's turn,
	// it tries to move into range of an enemy (if it isn't already)
	// and then attack (if it is in range).

	// "the order in which units take their turns within a round
	// is the reading order of their starting positions in that round"
	// make a list of all units in reading order of their starting positions
	var unitsToProcess []*Unit
	for y := 0; y < len(area); y++ {
		for x := 0; x < len(area[0]); x++ {
			if unit := area.unit(Point{y: y, x: x}); unit != nil {
				unitsToProcess = append(unitsToProcess, unit)
			}
		}
	}

	/*
		The ending condition is a bit subtle.
		The combat ends the first time a unit starts its turn with no enemies alive
		(which may be in the middle of a round)
		Make sure you break when the first goblin/elf notices a lack of enemies,
		not when an entire round goes without anyone doing anything.
		If the very last goblin/elf to go in a round kills its last enemy,
		that round should be counted but otherwise
		(if, say, the second-to-last elf/goblin to move kills its last target),
		the round is considered incomplete and not counted.
	*/
	for _, unit := range unitsToProcess {
		if area.unit(unit.Point) == nil {
			continue // this unit was killed earlier in this round
		}
		// "Each unit begins its turn by identifying all possible targets (enemy units).
		// If no targets remain, combat ends."
		var enemies []*Unit
		if enemies = findAllEnemies(area, unit); len(enemies) == 0 {
			return true // gameOver
		}

		if inrange := findEnemiesInRange(area, unit); len(inrange) > 0 {
			// "If the unit is already in range of a target,
			// it does not move, but continues its turn with an attack."
			attack(area, unit, inrange[0])
		} else {
			// "the unit identifies all of the open squares (.)
			// that are in range of each target;
			// these are the squares which are adjacent (immediately up, down, left, or right)
			// to any target and which aren't already occupied by a wall or another unit."
			// enemies := findAllEnemies(area, unit)
			// if len(enemies) == 0 {
			// 	return true // gameOver
			// }
			var adjacentSquares map[Point]struct{} = make(map[Point]struct{})
			for _, enemy := range enemies {
				if enemy.hitPoints <= 0 {
					panic("round: dead enemy")
				}
				for _, pt := range findAdjacentSquares(area, enemy) {
					adjacentSquares[pt] = struct{}{}
				}
			}
			if len(adjacentSquares) > 0 {
				if ok, nextPoint := selectTarget(area, unit, adjacentSquares); ok {
					// take a single step
					move(area, unit, nextPoint)
					// now try to attack again
					inrange := findEnemiesInRange(area, unit)
					if len(inrange) > 0 {
						attack(area, unit, inrange[0])
					}
				}
			}
			// "If the unit cannot reach (find an open path to) any of the squares that are in range, it ends its turn."
		}
	}
	return false // not gameOver
}

func numSpecies(area Area, species string) int {
	var count int
	for y := 0; y < len(area); y++ {
		for x := 0; x < len(area[0]); x++ {
			if unit := area.unit(Point{y: y, x: x}); unit != nil {
				if unit.species == species {
					count += 1
				}
			}
		}
	}
	return count
}

func sumHitPoints(area Area) int {
	var sum int
	for y := 0; y < len(area); y++ {
		for x := 0; x < len(area[0]); x++ {
			if unit := area.unit(Point{y: y, x: x}); unit != nil {
				sum += unit.hitPoints
			}
		}
	}
	return sum
}

func displayArea(title string, area Area) {
	fmt.Println(title)
	for y := 0; y < len(area); y++ {
		var displayUnits []*Unit
		for x := 0; x < len(area[0]); x++ {
			pt := Point{y: y, x: x}
			if unit := area.unit(pt); unit != nil {
				fmt.Print(unit.species)
				displayUnits = append(displayUnits, unit)
			} else if area.wall(pt) {
				fmt.Print("#")
			} else {
				fmt.Print(".")
			}
		}
		if len(displayUnits) > 0 {
			fmt.Print("\t")
			for _, u := range displayUnits {
				fmt.Printf("%s(%d) ", u.species, u.hitPoints)
			}
		}
		fmt.Println()
	}
	fmt.Println()
}

func partOne(in string, expected int) {
	defer duration(time.Now(), "part 1")
	area := loadInput(in, 3)

	// displayArea("Initially:", area)
	// round(area)
	// displayArea("After 1 round:", area)
	// round(area)
	// displayArea("After 2 rounds:", area)

	var result int

	for i := 0; i < 110; i++ {
		if round(area) {
			fmt.Println("break after", i, "rounds with", sumHitPoints(area), "hit points")
			result = i * sumHitPoints(area)
			break
		}
		displayArea(fmt.Sprintf("=== round %d ===", i+1), area)
	}
	// displayArea("Finally:", area)

	fmt.Println(numSpecies(area, "E"), "elves", numSpecies(area, "G"), "goblins,", sumHitPoints(area), "hit points")

	// fmt.Println(bfs(area,
	// 	Point{y: 1, x: 1},
	// 	Point{y: 5, x: 1}))
	// fmt.Println(bfs(area,
	// 	Point{y: 1, x: 1},
	// 	Point{y: 5, x: 5}))
	// fmt.Println(bfs(area,
	// 	Point{y: 1, x: 1},
	// 	Point{y: 3, x: 3}))
	// fmt.Println(bfs(area,
	// 	Point{y: 1, x: 1},
	// 	Point{y: 3, x: 5}))

	report(expected, result)
}

func partTwo(in string, expected int) {
	defer duration(time.Now(), "part 2")

	var result int

	for elfPower := 29; elfPower < 30; elfPower++ {
		area := loadInput(in, elfPower)
		var elves = numSpecies(area, "E") // 10
		for i := 0; i < 110; i++ {
			if round(area) || numSpecies(area, "E") < elves {
				fmt.Println("power", elfPower, "break after", i, "rounds with", sumHitPoints(area), "hit points", numSpecies(area, "E"), "elves", numSpecies(area, "G"), "goblins")
				result = i * sumHitPoints(area)
				break
			}
		}
	}

	report(expected, result)
}

func main() {
	defer duration(time.Now(), "main")

	// partOne(test1, 27730)
	// partOne(test2, 36334)
	// partOne(test3, 39514)
	// partOne(test4, 27755)
	// partOne(test5, 28944)
	// partOne(test6, 18740)

	partOne(input, 237996)

	// 245619 too high (2481 * 99)
	// 243138 wrong (2481 * 98)
	// 244020 wrong (2490 * 98)
	// 244213 wrong (2371 * 103)
	// 236808 wrong (2393 * 99) with NWES bfs (reading order?) 1188 short
	// 229078 wrong (2437 * 94) with anti-reading order
	// 237996

	// fmt.Println("part 2", partTwo(input, 69700)) // rounds 50, elves left 10, attack power 4 .. 19
}

/*
$ go run main.go
*/
