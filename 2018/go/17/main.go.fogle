// https://adventofcode.com/2018/day/17
package main

import (
	"bufio"
	_ "embed"
	"fmt"
	"math"
	"runtime"
	"strconv"
	"strings"
	"time"
)

//go:embed test1.txt
var test1 string

//go:embed input.txt
var input string

var clay map[Point]struct{} = make(map[Point]struct{})
var still map[Point]struct{} = make(map[Point]struct{})
var flowing map[Point]struct{} = make(map[Point]struct{})
var spring Point = Point{x: 500, y: 0}
var ymin, ymax = math.MaxInt64, 0

type QueueItem struct {
	fn func(Point)
	p  Point
}

var queue []QueueItem

type Point struct {
	x, y int
}

func (p Point) add(q Point) Point {
	return Point{y: p.y + q.y, x: p.x + q.x}
}

var directions []Point = []Point{
	{y: 1, x: 0},  // S
	{y: 0, x: -1}, // W
	{y: 0, x: 1},  // E
}

func duration(invocation time.Time, name string) {
	fmt.Println(name, "duration", time.Since(invocation))
}

func report(expected, result int) {
	if expected != -1 {
		if result != expected {
			fmt.Println("ERROR: got", result, "expected", expected)
		} else {
			fmt.Println("RIGHT ANSWER:", result)
		}
	}
}

// or we could use K&R p61
func atoi(s string) int {
	if n, err := strconv.Atoi(s); err == nil {
		return n
	} else {
		fmt.Println(err)
	}
	return 0
}

func token2range(s string) []int {
	lr := strings.Split(s, "..")
	if len(lr) == 1 {
		return []int{atoi(s)}
	} else {
		var a, b int = atoi(lr[0]), atoi(lr[1])
		var out []int = make([]int, 0, b-a+1)
		for i := a; i <= b; i++ {
			out = append(out, i)
		}
		return out
	}
}

func display(xmin, xmax, ymax int) {
	for y := 0; y <= ymax; y++ {
		for x := xmin; x <= xmax; x++ {
			var p Point = Point{x, y}
			if p == spring {
				fmt.Print("+")
			} else if _, ok := clay[p]; ok {
				fmt.Print("#")
			} else if _, ok := flowing[p]; ok {
				fmt.Print("~")
			} else if _, ok := still[p]; ok {
				fmt.Print("-")
			} else {
				fmt.Print(".")
			}
		}
		fmt.Println()
	}
}

func loadClay(in string) {
	scanner := bufio.NewScanner(strings.NewReader(in))
	for scanner.Scan() {
		lr := strings.Split(scanner.Text(), ", ")
		var xstr, ystr string

		if strings.HasPrefix(lr[0], "x=") {
			xstr = lr[0][2:]
		} else if strings.HasPrefix(lr[1], "x=") {
			xstr = lr[1][2:]
		}
		if strings.HasPrefix(lr[0], "y=") {
			ystr = lr[0][2:]
		} else if strings.HasPrefix(lr[1], "y=") {
			ystr = lr[1][2:]
		}
		for _, x := range token2range(xstr) {
			for _, y := range token2range(ystr) {
				clay[Point{x: x, y: y}] = struct{}{}
			}
		}
	}
	for p := range clay {
		ymin = min(ymin, p.y)
		ymax = max(ymax, p.y)
	}
	fmt.Println("clay from", ymin, "to", ymax, "total", len(clay)) // 6 -> 1679, 20971
}

func countAll() int {
	var tmp map[Point]struct{} = make(map[Point]struct{})
	for p := range still {
		if p.y <= ymax && p.y >= ymin {
			tmp[p] = struct{}{}
		}
	}
	for p := range flowing {
		if p.y <= ymax && p.y >= ymin {
			tmp[p] = struct{}{}
		}
	}
	return len(tmp)
}

func countStill() int {
	var count int
	for p := range still {
		if p.y <= ymax && p.y >= ymin {
			count += 1
		}
	}
	return count
}

func stop(p Point) bool {
	if _, ok := clay[p]; ok {
		return true
	}
	return false
}

func pile(p Point) bool {
	if _, ok := clay[p]; ok {
		return true
	}
	if _, ok := still[p]; ok {
		return true
	}
	return false
}

func fall(p Point) {
	for ; p.y <= ymax && !pile(Point{p.x, p.y + 1}); p.y += 1 {
		flowing[p] = struct{}{}
	}
	if p.y <= ymax {
		flowing[p] = struct{}{}
		queue = append(queue, QueueItem{scan, p})
	}
}

func scan(p Point) {
	x0 := p.x
	for ; pile(Point{x0, p.y + 1}) && !stop(Point{x0 - 1, p.y}); x0 -= 1 {
	}
	x1 := p.x
	for ; pile(Point{x1, p.y + 1}) && !stop(Point{x1 + 1, p.y}); x1 += 1 {
	}
	stop0 := stop(Point{x0 - 1, p.y})
	stop1 := stop(Point{x1 + 1, p.y})
	if stop0 && stop1 {
		for i := x0; i < x1+1; i++ {
			still[Point{i, p.y}] = struct{}{}
		}
		queue = append(queue, QueueItem{scan, Point{p.x, p.y - 1}})
	} else {
		for i := x0; i < x1+1; i++ {
			flowing[Point{i, p.y}] = struct{}{}
		}
		if !stop0 {
			queue = append(queue, QueueItem{fall, Point{x0, p.y}})
		}
		if !stop1 {
			queue = append(queue, QueueItem{fall, Point{x1, p.y}})
		}
	}
}

// https://www.michaelfogleman.com/aoc18/#17
func main() {
	loadClay(input)
	queue = append(queue, QueueItem{fall, spring})
	for len(queue) > 0 {
		var qi QueueItem
		qi, queue = queue[0], queue[1:]
		qi.fn(qi.p)
		if len(queue) > 1_000_000 {
			fmt.Println("break")
			break
		}
	}
	// display(490, 510, 15)
	fmt.Println("part 1", countAll()) // test1 57, input 11638 too low
	fmt.Println("part 2", countStill())

	// 38364
	// 30551

	{
		var memStats runtime.MemStats
		runtime.ReadMemStats(&memStats)
		fmt.Printf("Heap memory (in bytes): %d\n", memStats.HeapAlloc)
		fmt.Printf("Number of garbage collections: %d\n", memStats.NumGC)
	}
}

/*
$ go run main.go
*/
